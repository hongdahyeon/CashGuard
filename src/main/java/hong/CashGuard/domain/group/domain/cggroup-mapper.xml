<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hong.CashGuard.domain.group.domain.CgGroupMapper">

    <insert id="insert" parameterType="CgGroup" useGeneratedKeys="true" keyProperty="uid">
        /* cgGroup.insert */
        INSERT INTO CASH_GUARD.CG_GROUP (
             GROUP_NM
            ,IS_PRIVATE
            ,REG_UID
            ,REG_DT
            ,UPDT_UID
            ,UPDT_DT
        ) VALUES (
             #{groupNm}
            ,#{isPrivate}
            ,#{regUid}
            ,NOW()
            ,#{updtUid}
            ,NOW()
        )
    </insert>

    <select id="view" parameterType="Long" resultType="CgGroup">
        /* cgGroup.view */
        SELECT UID
              ,GROUP_NM
              ,IS_PRIVATE
          FROM CASH_GUARD.CG_GROUP
         WHERE UID = #{uid}
    </select>

    <update id="update" parameterType="CgGroup">
        /* cgGroup.update */
        UPDATE CASH_GUARD.CG_GROUP
           SET GROUP_NM = #{groupNm}
              ,IS_PRIVATE = #{isPrivate}
              ,UPDT_UID = #{updtUid}
              ,UPDT_DT = NOW()
         WHERE UID = #{uid}
    </update>

    <select id="page" parameterType="CgGroupParam" resultType="CgGroupList">
        /* cgGroup.page */
        SELECT CGGROUP.UID AS GROUP_UID
              ,CU_EXPONENT.UID AS EXPONENT_UID
              ,CU_EXPONENT.USER_NM AS EXPONENT_NM
              ,CGGROUP.GROUP_NM
              ,CGGROUP.IS_PRIVATE
              ,( SELECT COUNT(*)
                   FROM CASH_GUARD.CG_GROUP_MEMBER CM
                  WHERE CM.GROUP_UID = CGGROUP.UID
                    AND CM.IS_APPROVED = 'Y' ) AS APPROVED_MEMBER
              ,( SELECT COUNT(*)
                   FROM CASH_GUARD.CG_GROUP_MEMBER CM2
                  WHERE CM2.GROUP_UID = CGGROUP.UID ) AS TOTAL_MEMBER
              ,CGGROUP.REG_UID
              ,CGGROUP.REG_DT AS REG_DT
              ,CU_REG.USER_NM AS REG_NM
              ,CGGROUP.UPDT_UID
              ,CGGROUP.UPDT_DT AS UPDT_DT
              ,CU_UPDT.USER_NM AS UPDT_NM
          FROM CASH_GUARD.CG_GROUP CGGROUP
          LEFT JOIN CASH_GUARD.CG_GROUP_MEMBER CGM ON CGM.GROUP_UID = CGGROUP.UID AND CGM.IS_EXPONENT = 'Y'
         INNER JOIN CASH_GUARD.CG_USER CU_EXPONENT ON CU_EXPONENT.UID = CGM.USER_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_REG ON CU_REG.UID = CGGROUP.REG_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_UPDT ON CU_UPDT.UID = CGGROUP.UPDT_UID
         WHERE 1 = 1
        <if test="isPrivate != null and isPrivate != ''">
           AND CGGROUP.IS_PRIVATE = #{isPrivate}
        </if>
        <if test="groupNm != null and groupNm != ''">
           AND CGGROUP.GROUP_NM = #{groupNm}
        </if>
         ORDER BY CGGROUP.REG_DT DESC
        <if test="startNumber != null and endNumber != null">
         LIMIT #{endNumber} OFFSET #{startNumber}
        </if>
    </select>

    <select id="count" resultType="int" parameterType="CgGroupParam">
        /* cgGroup.count */
        SELECT COUNT(*)
          FROM CASH_GUARD.CG_GROUP CGGROUP
          LEFT JOIN CASH_GUARD.CG_GROUP_MEMBER CGM ON CGM.GROUP_UID = CGGROUP.UID AND CGM.IS_EXPONENT = 'Y'
         INNER JOIN CASH_GUARD.CG_USER CU_EXPONENT ON CU_EXPONENT.UID = CGM.USER_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_REG ON CU_REG.UID = CGGROUP.REG_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_UPDT ON CU_UPDT.UID = CGGROUP.UPDT_UID
         WHERE 1 = 1
        <if test="isPrivate != null and isPrivate != ''">
           AND CGGROUP.IS_PRIVATE = #{isPrivate}
        </if>
        <if test="groupNm != null and groupNm != ''">
           AND CGGROUP.GROUP_NM = #{groupNm}
        </if>
    </select>

    <select id="list" parameterType="CgGroupParam" resultType="CgGroupList">
        /* cgGroup.page */
        SELECT CGGROUP.UID AS GROUP_UID
              ,CU_EXPONENT.UID AS EXPONENT_UID
              ,CU_EXPONENT.USER_NM AS EXPONENT_NM
              ,CGGROUP.GROUP_NM
              ,CGGROUP.IS_PRIVATE
              ,( SELECT COUNT(*)
                   FROM CASH_GUARD.CG_GROUP_MEMBER CM
                  WHERE CM.GROUP_UID = CGGROUP.UID
                    AND CM.IS_APPROVED = 'Y' ) AS APPROVED_MEMBER
              ,( SELECT COUNT(*)
                   FROM CASH_GUARD.CG_GROUP_MEMBER CM2
                  WHERE CM2.GROUP_UID = CGGROUP.UID ) AS TOTAL_MEMBER
              ,CGGROUP.REG_UID
              ,CGGROUP.REG_DT AS REG_DT
              ,CU_REG.USER_NM AS REG_NM
              ,CGGROUP.UPDT_UID
              ,CGGROUP.UPDT_DT AS UPDT_DT
              ,CU_UPDT.USER_NM AS UPDT_NM
          FROM CASH_GUARD.CG_GROUP CGGROUP
          LEFT JOIN CASH_GUARD.CG_GROUP_MEMBER CGM ON CGM.GROUP_UID = CGGROUP.UID AND CGM.IS_EXPONENT = 'Y'
         INNER JOIN CASH_GUARD.CG_USER CU_EXPONENT ON CU_EXPONENT.UID = CGM.USER_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_REG ON CU_REG.UID = CGGROUP.REG_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_UPDT ON CU_UPDT.UID = CGGROUP.UPDT_UID
         WHERE 1 = 1
        <if test="isPrivate != null and isPrivate != ''">
           AND CGGROUP.IS_PRIVATE = #{isPrivate}
        </if>
        <if test="groupNm != null and groupNm != ''">
           AND CGGROUP.GROUP_NM = #{groupNm}
        </if>
         ORDER BY CGGROUP.REG_DT DESC
    </select>

    <select id="checkIfExist" parameterType="map" resultType="int">
        /* cgGroup.checkIfExist */
        SELECT COUNT(*)
          FROM CASH_GUARD.CG_GROUP_MEMBER
         WHERE USER_UID = #{userUid}
           AND GROUP_UID = #{groupUid}
    </select>

    <select id="getLoginUsersGroup" resultType="CgGroupAndMemberAndCategoryList" parameterType="Long">
        /* cgGroup.getLoginUsersGroup */
        SELECT CGM.GROUP_UID AS GROUP_UID
              ,CU_EXPONENT.UID AS EXPONENT_UID
              ,CU_EXPONENT.USER_NM AS EXPONENT_NM
              ,CG.GROUP_NM AS GROUP_NM
              ,CG.IS_PRIVATE AS IS_PRIVATE
              ,( SELECT COUNT(*)
                   FROM CASH_GUARD.CG_GROUP_MEMBER CGM
                  WHERE CGM.GROUP_UID = CG.UID
                    AND CGM.IS_APPROVED = 'Y' ) AS APPROVED_MEMBER
              ,CASE
                   WHEN ( SELECT COUNT(*)
                            FROM CASH_GUARD.CG_GROUP_MEMBER CGM2
                           WHERE CGM2.GROUP_UID = CG.UID
                             AND CGM2.IS_APPROVED = 'Y' ) >= 3
                   THEN true
                   ELSE false
                END AS IS_ACTIVE
              ,( SELECT COUNT(*)
                   FROM CASH_GUARD.CG_GROUP_MEMBER CGM3
                  WHERE CGM3.GROUP_UID = CG.UID ) AS TOTAL_MEMBER
              ,CG.REG_UID AS REG_UID
              ,CG.REG_DT AS REG_DT
              ,CU_REG.USER_NM AS REG_NM
              ,CG.UPDT_UID AS UPDT_UID
              ,CG.UPDT_DT AS UPDT_DT
              ,CU_UPDT.USER_NM AS UPDT_NM
          FROM CASH_GUARD.CG_GROUP_MEMBER CGM
         INNER JOIN CASH_GUARD.CG_USER CU_EXPONENT ON CU_EXPONENT.UID = CGM.USER_UID
         INNER JOIN CASH_GUARD.CG_GROUP CG ON CG.UID = CGM.GROUP_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_REG ON CU_REG.UID = CG.REG_UID
          LEFT JOIN CASH_GUARD.CG_USER CU_UPDT ON CU_UPDT.UID = CG.UPDT_UID
         WHERE CGM.USER_UID = #{userUid}
           AND CGM.IS_EXPONENT = 'Y'
    </select>

    <select id="getGroupListByUserUid" resultType="CgGroupInfo" parameterType="Long">
        /* cgGroup.getGroupListByUserUid */
        SELECT DISTINCT G.UID
                       ,G.GROUP_NM
                       ,CASE WHEN EXISTS (
                                    SELECT 1
                                      FROM CASH_GUARD.CG_GROUP_MEMBER GM_EXP
                                     WHERE GM_EXP.GROUP_UID = G.UID
                                       AND GM_EXP.USER_UID = #{userUid}
                                       AND GM_EXP.IS_EXPONENT = 'Y' ) THEN TRUE ELSE FALSE END AS IS_EXPONENT
                   FROM CASH_GUARD.CG_GROUP G
                   JOIN (  SELECT GM.GROUP_UID -- 활성화된 그룹만
                             FROM CASH_GUARD.CG_GROUP_MEMBER GM
                            WHERE GM.IS_APPROVED = 'Y'
                            GROUP BY GM.GROUP_UID
                           HAVING COUNT(*) >= 3
                   ) ACTIVE_GROUP ON G.UID = ACTIVE_GROUP.GROUP_UID JOIN CASH_GUARD.CG_GROUP_MEMBER GM
                     ON GM.GROUP_UID = G.UID
                    AND GM.USER_UID = #{userUid}
                    AND (GM.IS_APPROVED = 'Y' OR GM.IS_EXPONENT = 'Y')
    </select>
</mapper>